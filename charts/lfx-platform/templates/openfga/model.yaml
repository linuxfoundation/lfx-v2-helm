# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT
---
{{- if and .Values.openfga.enabled (index .Values "fga-operator" "enabled") }}
apiVersion: extensions.fga-operator/v1
kind: AuthorizationModelRequest
metadata:
  name: {{ index .Values "fga-operator" "store" }}
  labels:
    {{- include "lfx-platform.labels" . | nindent 4 }}
    app.kubernetes.io/component: openfga
spec:
  instances:
{{/*
  Each change to the authorization model should be accompanied by a version bump.
  These are the recommended guidelines for versioning:
    - major: Modifications, deletions, or additions of type
    - minor: Additions or deletions of relations
    - patch: Modifications of define
*/}}
    - version:
        major: 5
        minor: 0
        patch: 0
      authorizationModel: |
        model
          schema 1.1

        type user

        type team
          relations
            define member: [user]

        type project
          relations
            define parent: [project]
            define owner: [team#member] or owner from parent
            define writer: [user] or owner or writer from parent
            define auditor: [user, team#member] or writer or auditor from parent
            # The meeting_coordinator relation identifies a user who can manage any meeting
            # for a given project.
            define meeting_coordinator: [user]
            define viewer: [user:*] or auditor or auditor from parent

        type committee
          relations
            define member: [user]
            define project: [project]
            define owner: [user, team#member]
            define writer: [user] or owner or writer from project
            define auditor: [user, team#member] or auditor from project or meeting_coordinator from project
            define viewer: [user:*] or auditor or auditor from project

        type groupsio_service
          relations
            define project: [project]
            define owner: owner from project
            define writer: writer from project or owner
            define auditor: auditor from project or writer
            define viewer: [user:*] or auditor from project

        type groupsio_mailing_list
          relations
            define groupsio_service: [groupsio_service]  # Parent relationship
            define project: project from groupsio_service # Inherit project permissions
            define committee: [committee] # Inherit committee permissions
            define owner: owner from groupsio_service or owner from committee
            define writer: writer from groupsio_service or writer from committee
            define auditor: auditor from groupsio_service or auditor from committee
            define viewer: viewer from groupsio_service or member from committee

        type groupsio_member
          relations
            define groupsio_mailing_list: [groupsio_mailing_list]  # Parent relationship
            define owner: owner from groupsio_mailing_list
            define writer: [user] or writer from groupsio_mailing_list
            define auditor: [user] or auditor from groupsio_mailing_list
            define viewer: viewer from groupsio_mailing_list

        type meeting
          relations
            define project: [project]
            define committee: [committee]
            # The auditor relation identifies a user who can audit this meeting.
            define auditor: auditor from project
            # The organizer relation identifies a user who can manage this one meeting.
            # That means they can update the meeting details, invite/uninvite participants, etc.
            define organizer: [user] or meeting_coordinator from project or writer from committee or writer from project
            # The host relation identifies a user who is a host of this meeting.
            # This is different than the organizer relation because an organizer isn't necessarily
            # the user who is hosting the meeting, nor is the host necessarily the one who is
            # organizing the meeting. For example, a host may need to retrieve the Zoom host key
            # but shouldn't be able to update the meeting details.
            define host: [user] or organizer
            # The participant relation identifies a user who is a participant in this meeting.
            # This can either mean they are invited to the meeting or they attended the meeting
            # without being invited. In either case, they are a participant of that meeting.
            # Note that committee members are not automatically participants of meetings,
            # because the backend service needs to only include members from the committee
            # based on the voting status filters of that meeting. That is managed by the backend
            # services and therefore can't be a relationship in the authorization model.
            define participant: [user] or host
            # The viewer relation identifies a user who can view this meeting.
            # If the meeting is public, then any user can view it; but if it is private, then
            # only certain privileged users can view it.
            define viewer: [user:*] or participant or organizer or auditor

          type past_meeting
          relations
            define project: [project]
            define committee: [committee]
            # The meeting relation identifies the meeting that this past meeting was created from.
            # Note: it is possible that the meeting no longer exists, so having permissions on the
            # meeting become obsolete if the meeting is deleted.
            define meeting: [meeting]
            # The auditor relation identifies a user who can audit this meeting.
            define auditor: auditor from project or auditor from meeting
            # The organizer relation identifies a user who can manage this one past meeting.
            # That means they can update the past meeting details, update the participants, etc.
            define organizer: [user] or meeting_coordinator from project or writer from project or organizer from meeting
            # The host relation identifies a user who was a host of this past meeting.
            define host: [user] or organizer
            # The invitee relation identifies a participant who was invited to this past meeting.
            define invitee: [user]
            # The attendee relation identifies a participant who attended this past meeting.
            define attendee: [user]
            # The viewer relation identifies a user who can view this past meeting.
            # If the past meeting is public, then any user can view it; but if it is private, then
            # only certain privileged users can view it.
            define viewer: [user:*] or attendee or invitee or organizer or auditor
{{- end }}
